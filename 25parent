#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void bubble_sort(int arr[], int n) {
    int i, j, temp;
    for(i = 0; i < n-1; i++)
        for(j = 0; j < n-i-1; j++)
            if(arr[j] > arr[j+1]) {
                temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp;
            }
}

int main() {
    int n, i;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter elements:\n");
    for(i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    bubble_sort(arr, n); // Parent sorts the array

    // Prepare arguments for execve
    char *args[n+2]; // arr elements + NULL
    for(i = 0; i < n; i++) {
        char *num = malloc(12);
        sprintf(num, "%d", arr[i]);
        args[i] = num;
    }
    args[n] = NULL; // Terminate array

    pid_t pid = fork();
    if(pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if(pid == 0) { // Child
        char *envp[] = {NULL};
        execve("./child", args, envp); // Load child program
        perror("execve failed");
        exit(1);
    } else {
        wait(NULL); // Wait for child
        printf("Parent finished\n");
    }
    return 0;
}

#----------------------------------------------------------
gcc parent.c -o parent
gcc child.c -o child

./parent
./child
